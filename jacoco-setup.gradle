apply plugin: 'jacoco'

task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        csv.enabled = false
        xml.enabled = false
        html.enabled = true
    }

    final fileFilter = ['**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        'android/**/*.*']

    final kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    final javacTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug", excludes: fileFilter)
    final mainSrc = "${project.buildDir}/src/main/java"

    sourceDirectories.setFrom files([mainSrc])
    classDirectories.setFrom files([kotlinTree, javacTree])
    executionData.setFrom fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    def projects = subprojects

    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/html')
        }
        xml {
            enabled true
            destination file('build/reports/jacoco/coverage.xml')
        }
    }

    doFirst {
        executionData.setFrom files(executionData.findAll { it.exists() })
    }
}

